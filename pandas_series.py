# -*- coding: utf-8 -*-
"""Pandas_Series.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b63Q2_98fOUaIwOW6i2RfA9ijmPJE_Fy
"""

import numpy as np
import pandas as pd

"""#SERIES FROM LIST"""

students=["a","b","c","d"]
print(pd.Series(students))
print()
rollno=[1,2,3,4]
print(pd.Series(rollno))

"""##custom indexing using a parameter index"""

pd.Series(students,index=rollno)

"""##providing custom name to a series"""

marks=pd.Series(students,index=rollno,name="CS420")

print(marks)

"""#---------------------------------------------#

#SERIES FROM DICTIONARY

##key becomes index and value becomes corresponding value
"""

marks={
    'maths':58,
    'english':79,
    'science':90,
    'hindi':100
}

marks_series=pd.Series(marks,name="MID-SEM")
print(marks_series)

"""#--------------------------------------------------------------------

#ATTRIBUTES OF SERIES
"""

#size
marks_series.size

#types
marks_series.dtype

#name
marks_series.name

#is_unique -- tell whether all items are unique or not
marks_series.is_unique

#index--gives all index values
marks_series.index

#values--gives all values
marks_series.values

"""#-----------------------------------------------------------------

#SERIES USING READ_CSV
"""

# with one col
# pd.read_csv('/content/subs.csv') #its currently not a series, its a dataframe
subs=pd.read_csv('/content/subs.csv')
print(pd.read_csv('/content/subs.csv')) #its currently not a series, its a dataframe
print()
print(type(pd.read_csv('/content/subs.csv')))
print()
series=subs.squeeze()
print(type(series))
print(series)

#with 2 cols
df=pd.read_csv('/content/kohli_ipl.csv',index_col='match_no')
print(type(df))
vk=df.squeeze()
print(type(vk))
print(vk)

movies=pd.read_csv('/content/bollywood.csv')
print(movies)
movies=pd.read_csv('/content/bollywood.csv',index_col='movie')
print(movies.squeeze())

"""#SERIES METHODS---------------"""

#head and tail --- by default 5 , we can also pass as argumnet
print(subs.head(3))
print()
print(vk.tail())

#sample ---- shows 1 row randomly(normally gives only one row, optional parameter )
print(movies.sample(5))

#value_count -> movies(how many entries of a key)--in ascending order
movies.value_counts()

#sort_values -> inplace | ascending by default | (not permanent changes)
# for permanent changes -- parameter (inplace=True)
vk.sort_values(ascending=False)

#sort_index ->inplace by default (can paramter inplace=True)
movies.sort_index()

"""#SERIES MATHS METHODS"""

#count--gives total values(does not count missing values but size does)
vk.count()

#sum/product
subs.sum()

#mean,median,mode,std,var
print(subs.mean())
print()
print(vk.median())
print()
print(movies.mode())
print()
print(subs.std())
print()
print(vk.var())
print()
print(subs.min())
print()
print(subs.max())

#describe
vk.describe()

"""#SERIES INDEXING"""

#integer indexing
x=pd.Series([12,13,1,414,52])
print(x[0])
print(movies)

#slicing
vk[5:16]

#fancy indexing
vk[[1,3,4,5]]

"""#EDITING ITEMS IN SERIES"""

#using indexing
print(marks_series)
marks_series[0]=100
print()
print(marks_series)

#what if an index does not exist | we want to add anything in our series
marks_series['sst']=90
marks_series

#using sliding
# runs_ser[2:4]=[100,100]

#using fancy indexing
# runs_ser[[0,2,5]]=[0,0,0]

#type conversions
list(marks_series)

dict(marks_series)

#membership operator
print(0 in vk) #false bcoz it works on index not on values
print(0 in vk.values) #to search in values

#loop -- iterates over value
# for i in movies.index:
#   print(i)

#arithmetic operators[broadcasting]--adding in all numbers
100-marks_series

#relational operators --return boolean array
vk>=50

"""#boolean indexing on series"""

#find number of 50's and 100's
print(vk[vk>=50].count())
print(vk[vk>=100].count())

"""#plotting graphs"""

subs.plot()

#kinds may be pie,bar,
movies.value_counts().head(20).plot(kind='pie')

